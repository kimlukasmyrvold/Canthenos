@using Canthenos.Web.Models
@inject NavigationManager NavigationManager;

<EditForm Model="@_new" OnValidSubmit="@Submit" class="login__container__form">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="login__container__form__hero">
        <p class="title">Make a password</p>
        <p class="description">Use a combination of letters, numbers and symbols to create a secure password</p>
    </div>

    <div class="login__container__form__inputField">
        <div class="login__container__form__inputField__input">
            <InputText Type="@InputType" id="password" @bind-Value="_new.Password" placeholder="Password"></InputText>
            <ValidationMessage For="@(() => _new.Password)"></ValidationMessage>
        </div>

        <div class="login__container__form__inputField__input">
            <InputText Type="@InputType" id="confirm" @bind-Value="_new.ConfirmPassword" placeholder="Confirm"></InputText>
            <ValidationMessage For="@(() => _new.ConfirmPassword)"></ValidationMessage>
        </div>

        <PasswordToggle OnTogglePasswordVisibility="TogglePasswordVisibility"></PasswordToggle>
    </div>

    <div class="login__container__form__submitField">
        <button class="button-cancel" type="reset" @onclick='() => NavigationManager.NavigateTo("login", true)'>Back</button>
        <button type="submit">Next</button>
    </div>
</EditForm>

@code {

    private bool _showPassword = false;
    private string InputType => _showPassword ? "text" : "password";

    [Parameter] public EventCallback<string> OnValidSubmit { get; set; }

    private Task TogglePasswordVisibility(bool showPassword)
    {
        _showPassword = showPassword;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private readonly NewUserModelPassword _new = new();

    private async Task Submit()
    {
        ArgumentNullException.ThrowIfNull(_new.Password);
        ArgumentNullException.ThrowIfNull(_new.ConfirmPassword);

        Console.WriteLine($"Password: {_new.Password} ConfirmPassword: {_new.ConfirmPassword}");

        await OnValidSubmit.InvokeAsync(_new.Password);
    }

}